{"version":3,"sources":["components/TaskCard/TaskCard.module.css","components/TakePhoto/TakePhoto.module.css","App.module.css","components/TasksList/TasksList.module.css","state/state.reducer.ts","state/state.context.tsx","utils/date.utils.ts","components/TaskCard/TaskCard.tsx","components/TakePhoto/TakePhoto.tsx","components/TasksList/TasksList.tsx","state/state.actions.ts","services/data.service.ts","scenes/TasksScene/TasksScene.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["module","exports","reducer","state","action","type","tasks","value","taskIdx","findIndex","t","_id","task","initialState","StateContext","createContext","StateProvider","children","useReducer","dispatch","Provider","formatTime","str","date","Date","getHours","getMinutes","toString","padStart","e","TaskCard","className","onPhotoRemove","onCompleteStep","onPhotoAddStart","onReset","cn","s","wrapper","location","description","milestones","milestone","travelStart","complete","travelEnd","workStart","workEnd","buttons","completeButton","onClick","disabled","resetButton","photos","map","photo","idx","alt","src","remove","addPhoto","memo","TakePhoto","onPhoto","onCancel","videoRef","useRef","useState","stream","setStream","isVideoReady","setReady","undefined","capabilities","setCapabilities","initStream","useCallback","a","current","addEventListener","console","log","getVideoTracks","getCapabilities","play","navigator","mediaDevices","getUserMedia","audio","video","facingMode","srcObject","useEffect","pause","getTracks","forEach","track","stop","handleTorchClick","isTorchOn","tracks","videoTrack","torch","applyConstraints","advanced","then","flash","ref","muted","playsInline","backButton","takePhotoButton","videoCanvas","document","createElement","height","videoHeight","width","videoWidth","videoContext","getContext","drawImage","dataUrl","toDataURL","torchButton","style","fontSize","JSON","stringify","TasksList","onPhotoAdd","onTaskReset","photoTask","setPhotoTask","index","data","LoadTasksAction","UpdateTaskAction","base","fetch","response","json","updateTask","content","method","headers","body","TasksScene","useContext","fetchTasks","updated","splice","toISOString","version","process","App","footer","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","href","origin","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c5634148.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TaskCard_wrapper__2pwFH\",\"milestones\":\"TaskCard_milestones__aQ1Fm\",\"milestone\":\"TaskCard_milestone__1ZgSQ\",\"complete\":\"TaskCard_complete__2qkrJ\",\"photos\":\"TaskCard_photos__2EWg6\",\"photo\":\"TaskCard_photo__qubp1\",\"addPhoto\":\"TaskCard_addPhoto__2k0jz\",\"remove\":\"TaskCard_remove__5Qf8u\",\"buttons\":\"TaskCard_buttons__1SyS5\",\"completeButton\":\"TaskCard_completeButton__oOeo0\",\"resetButton\":\"TaskCard_resetButton__3Nj-C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TakePhoto_wrapper__2IAC6\",\"video\":\"TakePhoto_video__3jRgH\",\"buttons\":\"TakePhoto_buttons__10Dcp\",\"backButton\":\"TakePhoto_backButton__mVHoW\",\"takePhotoButton\":\"TakePhoto_takePhotoButton__3jwSX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2yWJv\",\"footer\":\"App_footer__2nLYZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TasksList_wrapper__19HVx\"};","import { Task } from '../models/Task';\r\nimport { Action } from './state.actions';\r\n\r\nexport type State = {\r\n    tasks: Task[];\r\n};\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n    switch (action.type) {\r\n        case 'LoadTasks':\r\n            return {\r\n                ...state,\r\n                tasks: [...action.value],\r\n            };\r\n\r\n        case 'UpdateTask': {\r\n            const taskIdx = state.tasks.findIndex(t => t._id === action.task._id);\r\n            if (!taskIdx) {\r\n                return state;\r\n            }\r\n            const tasks = state.tasks;\r\n            tasks[taskIdx] = { ...action.task };\r\n            return {\r\n                ...state,\r\n                tasks: [...tasks],\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const initialState: State = {\r\n    tasks: [],\r\n};\r\n","import { initialState, reducer, State } from './state.reducer';\r\nimport { ReactNode, useReducer, createContext } from 'react';\r\nimport { Action } from './state.actions';\r\n\r\nexport const StateContext = createContext<\r\n    [State, (action: Action) => void]\r\n>([initialState, () => {}]);\r\n\r\nexport const StateProvider = ({ children }: { children: ReactNode }) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    return (\r\n        <StateContext.Provider value={[state, dispatch]}>\r\n            {children}\r\n        </StateContext.Provider>\r\n    );\r\n};\r\n","export const formatTime = (str?: string): string => {\r\n    if (!str) {\r\n        return '';\r\n    }\r\n    try {\r\n        const date = new Date(str);\r\n        return `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;\r\n    } catch (e) {\r\n        return '';\r\n    }\r\n};\r\n","import { FC, memo } from 'react';\r\nimport cn from 'classnames';\r\n\r\nimport s from './TaskCard.module.css';\r\nimport { Task } from '../../models/Task';\r\nimport { formatTime } from '../../utils/date.utils';\r\n\r\ninterface IProps {\r\n    className?: string;\r\n    task: Task;\r\n    onPhotoRemove: (idx: number) => void;\r\n    onCompleteStep: () => void;\r\n    onReset: () => void;\r\n    onPhotoAddStart: () => void;\r\n}\r\n\r\nconst TaskCard: FC<IProps> = ({ className, task, onPhotoRemove, onCompleteStep, onPhotoAddStart, onReset }) => {\r\n    return (\r\n        <div className={cn(s.wrapper, className)}>\r\n            <header>\r\n                <div><b>{task.location}</b></div>\r\n                <div>{task.description}</div>\r\n            </header>\r\n            <div className={s.milestones}>\r\n                <ul>\r\n                    <li className={cn(s.milestone, task.travelStart && s.complete)}>\r\n                        <b>Travel started </b>\r\n                        <span>{formatTime(task.travelStart)}</span>\r\n                    </li>\r\n                    {task.travelStart && <li className={cn(s.milestone, task.travelEnd && s.complete)}>\r\n                      <b>Travel finished </b>\r\n                      <span>{formatTime(task.travelEnd)}</span>\r\n                    </li>}\r\n                    {task.travelEnd &&\r\n                    <li className={cn(s.milestone, task.workStart && s.complete)}>\r\n                      <b>Work started </b>\r\n                      <span>{formatTime(task.workStart)}</span>\r\n                    </li>\r\n                    }\r\n                    {task.workStart &&\r\n                    <li className={cn(s.milestone, task.workEnd && s.complete)}>\r\n                      <b>Work finished </b>\r\n                      <span>{formatTime(task.workEnd)}</span>\r\n                    </li>\r\n                    }\r\n                </ul>\r\n                <div className={s.buttons}>\r\n                    <button className={s.completeButton} onClick={onCompleteStep} disabled={!!task.workEnd}>▶</button>\r\n                    <button className={s.resetButton} onClick={onReset}>Reset</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.photos}>\r\n                {task.photos && task.photos.map((photo, idx) =>\r\n                    <div key={idx} className={s.photo} onClick={() => onPhotoRemove(idx)}>\r\n                        <img alt=\"\" src={photo}/>\r\n                        <span className={s.remove}>×</span>\r\n                    </div>,\r\n                )}\r\n                <div className={s.addPhoto} onClick={onPhotoAddStart}>\r\n                    📷\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(TaskCard);\r\n","import { FC, useRef, useState, useEffect, useCallback } from 'react';\r\nimport cn from 'classnames';\r\n\r\nimport s from './TakePhoto.module.css';\r\n\r\ninterface IProps {\r\n    className?: string;\r\n    onPhoto: (dataUrl: string) => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nconst TakePhoto: FC<IProps> = ({ onPhoto, onCancel }) => {\r\n    const videoRef = useRef<HTMLVideoElement>(null);\r\n\r\n    const [stream, setStream] = useState<MediaStream | null>(null);\r\n    const [isVideoReady, setReady] = useState<boolean>(false);\r\n    const [capabilities, setCapabilities] = useState<MediaTrackCapabilities | undefined>(undefined);\r\n\r\n    const initStream = useCallback(async () => {\r\n        if (videoRef.current) {\r\n            videoRef.current.addEventListener('loadedmetadata', () => {\r\n                console.log('video ready');\r\n                const capabilities = stream?.getVideoTracks()[0].getCapabilities();\r\n                setCapabilities(capabilities);\r\n                setReady(true);\r\n            });\r\n            videoRef.current.addEventListener('loadeddata', () => {\r\n                videoRef.current && videoRef.current.play();\r\n            });\r\n            videoRef.current.addEventListener('ended', () => {\r\n                console.log('stream ended');\r\n                setStream(null);\r\n                setReady(false);\r\n            });\r\n            const s = await navigator.mediaDevices.getUserMedia({\r\n                audio: false,\r\n                video: {\r\n                    facingMode: 'environment',\r\n                },\r\n            });\r\n            console.log('setting stream');\r\n            setStream(s);\r\n            videoRef.current.srcObject = s;\r\n        }\r\n    }, [stream]);\r\n\r\n    const takePhoto = () => {\r\n        const video = videoRef.current;\r\n        if (!video) {\r\n            return;\r\n        }\r\n        const videoCanvas = document.createElement('canvas');\r\n        const scaleDownFactor = 2;\r\n        videoCanvas.height = video.videoHeight / scaleDownFactor;\r\n        videoCanvas.width = video.videoWidth / scaleDownFactor;\r\n        const videoContext = videoCanvas.getContext('2d');\r\n\r\n        if (!videoContext) {\r\n            return;\r\n        }\r\n        videoContext.drawImage(video, 0, 0, video.videoWidth / scaleDownFactor, video.videoHeight / scaleDownFactor);\r\n\r\n        const dataUrl = videoCanvas.toDataURL('image/webp', 0.8);\r\n        onPhoto(dataUrl);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const video = videoRef.current;\r\n        if (!stream) {\r\n            initStream();\r\n        }\r\n        return () => {\r\n            video && video.pause();\r\n            stream && stream.getTracks().forEach(function (track) {\r\n                track.stop();\r\n            });\r\n        };\r\n    }, [initStream, stream]);\r\n\r\n    const handleTorchClick = useCallback((isTorchOn) => {\r\n        const tracks = stream?.getVideoTracks();\r\n        const videoTrack = tracks && tracks[0];\r\n        if (videoTrack && isVideoReady) {\r\n            // @ts-ignore\r\n            if (capabilities.torch) {\r\n                videoTrack.applyConstraints({\r\n                    // @ts-ignore\r\n                    advanced: [{ torch: isTorchOn }],\r\n                }).then(() => {\r\n                    console.log((`torch is ${isTorchOn ? 'on' : 'off'}`));\r\n                });\r\n            }\r\n            // @ts-ignore\r\n            else if (capabilities.flash) {\r\n                videoTrack.applyConstraints({\r\n                    // @ts-ignore\r\n                    advanced: [{ flash: isTorchOn }],\r\n                }).then(() => {\r\n                    console.log((`torch is ${isTorchOn ? 'on' : 'off'}`));\r\n                });\r\n            }\r\n        }\r\n    }, [isVideoReady, stream]);\r\n\r\n    return (\r\n        <div className={cn(s.wrapper)}>\r\n            <video className={s.video} ref={videoRef} muted playsInline/>\r\n            <div className={s.buttons}>\r\n                <button className={s.backButton} onClick={onCancel} disabled={!isVideoReady}>Back</button>\r\n                <button className={s.takePhotoButton} onClick={takePhoto} disabled={!isVideoReady}>Take photo!</button>\r\n                <button className={s.torchButton} onClick={() => handleTorchClick(true)}\r\n                        disabled={!isVideoReady}>Flash\r\n                </button>\r\n            </div>\r\n            <div style={{fontSize: \"10px\"}}>\r\n                {JSON.stringify(capabilities)}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default (TakePhoto);\r\n","import { FC, useState } from 'react';\r\nimport cn from 'classnames';\r\n\r\nimport s from './TasksList.module.css';\r\nimport { Task } from '../../models/Task';\r\nimport TaskCard from '../TaskCard/TaskCard';\r\nimport TakePhoto from '../TakePhoto/TakePhoto';\r\n\r\ninterface IProps {\r\n    className?: string;\r\n    tasks: Task[];\r\n    onPhotoAdd: (task: Task, data: string) => void;\r\n    onPhotoRemove: (task: Task, index: number) => void;\r\n    onCompleteStep: (task: Task) => void;\r\n    onTaskReset: (task: Task) => void;\r\n}\r\n\r\nconst TasksList: FC<IProps> = ({ className, onPhotoRemove, tasks, onCompleteStep, onPhotoAdd, onTaskReset }) => {\r\n    const [photoTask, setPhotoTask] = useState<Task | null>(null);\r\n\r\n    console.log(tasks);\r\n\r\n    return (\r\n        <div className={cn(s.wrapper, className)}>\r\n            <ul>\r\n                {tasks.map(task => <li>\r\n                    <TaskCard key={task._id}\r\n                              task={task}\r\n                              onPhotoRemove={index => onPhotoRemove(task, index)}\r\n                              onPhotoAddStart={() => setPhotoTask(task)}\r\n                              onCompleteStep={() => onCompleteStep(task)}\r\n                              onReset={() => onTaskReset(task)}/>\r\n                </li>)}\r\n            </ul>\r\n            {photoTask && <TakePhoto onCancel={() => setPhotoTask(null)} onPhoto={(data) => {\r\n                onPhotoAdd(photoTask, data);\r\n                setPhotoTask(null);\r\n            }}/>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default (TasksList);\r\n","import { Task } from '../models/Task';\r\n\r\nexport class LoadTasksAction {\r\n    readonly type = 'LoadTasks';\r\n\r\n    constructor(readonly value: Task[]) {\r\n    }\r\n}\r\n\r\nexport class UpdateTaskAction {\r\n    readonly type = 'UpdateTask';\r\n\r\n    constructor(readonly task: Task) {\r\n    }\r\n}\r\n\r\nexport class AddPhotoAction {\r\n    readonly type = 'AddPhoto';\r\n\r\n    constructor(readonly taskId: string, readonly photo: string) {\r\n    }\r\n}\r\n\r\nexport class RemovePhotoAction {\r\n    readonly type = 'RemovePhoto';\r\n\r\n    constructor(readonly taskId: string, readonly index: number) {\r\n    }\r\n}\r\n\r\nexport class CompleteStepAction {\r\n    readonly type = 'CompleteStep';\r\n\r\n    constructor(readonly taskId: string) {\r\n    }\r\n}\r\n\r\nexport class ResetTaskAction {\r\n    readonly type = 'ResetTask';\r\n\r\n    constructor(readonly taskId: string) {\r\n    }\r\n}\r\n\r\nexport type Action = LoadTasksAction | AddPhotoAction | RemovePhotoAction | CompleteStepAction | ResetTaskAction | UpdateTaskAction;\r\n","import { Task } from '../models/Task';\r\n\r\nconst base = 'https://crudcrud.com/api/1aa10a5e89e24398bd56391f380dddd3';\r\n\r\nexport async function fetchTasks() {\r\n    const response = await fetch(`${base}/tasks`);\r\n    const tasks: Task[] = await response.json();\r\n    return tasks;\r\n}\r\n\r\nexport async function updateTask(task: Task) {\r\n    const { _id, ...content } = task;\r\n    const response = await fetch(`${base}/tasks/${_id}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(content),\r\n    });\r\n    return response;\r\n}\r\n","import { FC, useContext, useEffect } from 'react';\r\n\r\nimport s from './TasksScene.module.css';\r\nimport TasksList from '../../components/TasksList/TasksList';\r\nimport { StateContext } from '../../state/state.context';\r\nimport { Task } from '../../models/Task';\r\nimport { LoadTasksAction, UpdateTaskAction } from '../../state/state.actions';\r\nimport { fetchTasks, updateTask } from '../../services/data.service';\r\n\r\ninterface IProps {\r\n}\r\n\r\nconst TasksScene: FC<IProps> = () => {\r\n    const [{ tasks }, dispatch] = useContext(StateContext);\r\n\r\n    useEffect(() => {\r\n        fetchTasks().then(tasks => dispatch(new LoadTasksAction(tasks)));\r\n    }, [dispatch]);\r\n\r\n    const savePhoto = (task: Task, dataUrl: string) => {\r\n        const photos = task.photos || [];\r\n        const updated = { ...task, photos: [...photos, dataUrl] };\r\n        updateTask(updated);\r\n        dispatch(new UpdateTaskAction(updated));\r\n\r\n    };\r\n\r\n    const removePhoto = (task: Task, index: number) => {\r\n        const photos = [...task.photos];\r\n        const updated = { ...task, photos: photos.splice(index, 1) };\r\n        updateTask(updated);\r\n        dispatch(new UpdateTaskAction(updated));\r\n    };\r\n\r\n    const stepTask = (task: Task) => {\r\n        const updated = {\r\n            ...task,\r\n        };\r\n        if (updated.workEnd) {\r\n        } else if (updated.workStart) {\r\n            updated.workEnd = new Date().toISOString();\r\n        } else if (updated.travelEnd) {\r\n            updated.workStart = new Date().toISOString();\r\n        } else if (updated.travelStart) {\r\n            updated.travelEnd = new Date().toISOString();\r\n        } else {\r\n            updated.travelStart = new Date().toISOString();\r\n        }\r\n        updateTask(updated);\r\n        dispatch(new UpdateTaskAction(updated));\r\n    };\r\n\r\n    const resetTask = (task: Task) => {\r\n        const updated = {\r\n            ...task,\r\n            workEnd: undefined,\r\n            workStart: undefined,\r\n            travelEnd: undefined,\r\n            travelStart: undefined,\r\n        };\r\n        updateTask(updated);\r\n        dispatch(new UpdateTaskAction(updated));\r\n    };\r\n\r\n    return (<div className={s.wrapper}>\r\n            <TasksList tasks={tasks}\r\n                       onPhotoRemove={removePhoto}\r\n                       onPhotoAdd={savePhoto}\r\n                       onCompleteStep={stepTask}\r\n                       onTaskReset={resetTask}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default (TasksScene);\r\n","import React from 'react';\r\nimport s from './App.module.css';\r\nimport { StateProvider } from './state/state.context';\r\nimport TasksScene from './scenes/TasksScene/TasksScene';\r\n\r\nconst version = process.env.REACT_APP_VERSION;\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <StateProvider>\r\n                <TasksScene/>\r\n            </StateProvider>\r\n            {version && <footer className={s.footer}>version {version}</footer>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './normalize.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}